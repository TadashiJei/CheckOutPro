<%- include('../../partials/header') %>
<%- include('../../partials/sidebar') %>

<div class="content-wrapper">
  <div class="content-header">
    <div class="container-fluid">
      <div class="row mb-2">
        <div class="col-sm-6">
          <h1 class="m-0"><%= title %></h1>
        </div>
        <div class="col-sm-6">
          <ol class="breadcrumb float-sm-right">
            <li class="breadcrumb-item"><a href="/dashboard">Home</a></li>
            <li class="breadcrumb-item"><a href="/management/employees">Employees</a></li>
            <li class="breadcrumb-item active">Schedule Calendar</li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <section class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-3">
          <div class="card">
            <div class="card-header">
              <h3 class="card-title">Filter Options</h3>
            </div>
            <div class="card-body">
              <div class="form-group">
                <label>Employee:</label>
                <select id="employee-filter" class="form-control">
                  <option value="">All Employees</option>
                  <% employees.forEach(function(employee) { %>
                    <option value="<%= employee.id %>"><%= employee.first_name %> <%= employee.last_name %></option>
                  <% }); %>
                </select>
              </div>
              <div class="form-group">
                <label>Shift Type:</label>
                <select id="shift-type-filter" class="form-control">
                  <option value="">All Shifts</option>
                  <option value="morning">Morning</option>
                  <option value="afternoon">Afternoon</option>
                  <option value="evening">Evening</option>
                  <option value="night">Night</option>
                  <option value="full-day">Full Day</option>
                  <option value="training">Training</option>
                  <option value="meeting">Meeting</option>
                  <option value="off">Day Off</option>
                </select>
              </div>
              <div class="form-group">
                <button id="add-schedule" class="btn btn-primary btn-block">Add Schedule</button>
              </div>
            </div>
          </div>
          <div class="card">
            <div class="card-header">
              <h3 class="card-title">Shift Legend</h3>
            </div>
            <div class="card-body p-0">
              <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Morning
                  <span class="badge badge-pill" style="background-color: #4CAF50; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Afternoon
                  <span class="badge badge-pill" style="background-color: #2196F3; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Evening
                  <span class="badge badge-pill" style="background-color: #9C27B0; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Night
                  <span class="badge badge-pill" style="background-color: #3F51B5; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Full Day
                  <span class="badge badge-pill" style="background-color: #FF9800; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Training
                  <span class="badge badge-pill" style="background-color: #FFEB3B; color: black;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Meeting
                  <span class="badge badge-pill" style="background-color: #F44336; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  Day Off
                  <span class="badge badge-pill" style="background-color: #9E9E9E; color: white;">&nbsp;&nbsp;&nbsp;</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div class="col-md-9">
          <div class="card">
            <div class="card-body">
              <div id="calendar"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>

<!-- Schedule Modal -->
<div class="modal fade" id="schedule-modal" tabindex="-1" role="dialog" aria-labelledby="schedule-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="schedule-modal-label">Add Schedule</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="schedule-form">
          <input type="hidden" id="schedule-id">
          <div class="form-group">
            <label for="employee_id">Employee</label>
            <select id="employee_id" name="employee_id" class="form-control" required>
              <option value="">Select Employee</option>
              <% employees.forEach(function(employee) { %>
                <option value="<%= employee.id %>"><%= employee.first_name %> <%= employee.last_name %></option>
              <% }); %>
            </select>
          </div>
          <div class="form-group">
            <label for="shift_type">Shift Type</label>
            <select id="shift_type" name="shift_type" class="form-control" required>
              <option value="">Select Shift Type</option>
              <option value="morning">Morning</option>
              <option value="afternoon">Afternoon</option>
              <option value="evening">Evening</option>
              <option value="night">Night</option>
              <option value="full-day">Full Day</option>
              <option value="training">Training</option>
              <option value="meeting">Meeting</option>
              <option value="off">Day Off</option>
            </select>
          </div>
          <div class="form-group">
            <label for="start_time">Start Time</label>
            <input type="datetime-local" id="start_time" name="start_time" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="end_time">End Time</label>
            <input type="datetime-local" id="end_time" name="end_time" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="notes">Notes</label>
            <textarea id="notes" name="notes" class="form-control" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" class="form-control">
              <option value="scheduled">Scheduled</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
          <div class="form-group">
            <div class="custom-control custom-checkbox">
              <input type="checkbox" class="custom-control-input" id="send_notification" name="send_notification" value="true">
              <label class="custom-control-label" for="send_notification">Send notification to employee</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger mr-auto d-none" id="delete-schedule">Delete</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="save-schedule">Save</button>
      </div>
    </div>
  </div>
</div>

<%- include('../../partials/footer') %>

<!-- FullCalendar -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const calendarEl = document.getElementById('calendar');
    const employeeFilter = document.getElementById('employee-filter');
    const shiftTypeFilter = document.getElementById('shift-type-filter');
    const addScheduleBtn = document.getElementById('add-schedule');
    const scheduleModal = $('#schedule-modal');
    const scheduleForm = document.getElementById('schedule-form');
    const saveScheduleBtn = document.getElementById('save-schedule');
    const deleteScheduleBtn = document.getElementById('delete-schedule');
    
    // Initialize calendar
    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'dayGridMonth',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      events: function(info, successCallback, failureCallback) {
        // Get events from API
        const params = new URLSearchParams({
          start: info.startStr,
          end: info.endStr
        });
        
        // Add filters if selected
        if (employeeFilter.value) {
          params.append('employee_id', employeeFilter.value);
        }
        
        if (shiftTypeFilter.value) {
          params.append('shift_type', shiftTypeFilter.value);
        }
        
        fetch(`/management/schedule/data?${params}`)
          .then(response => response.json())
          .then(data => {
            successCallback(data);
          })
          .catch(error => {
            console.error('Error fetching schedule data:', error);
            failureCallback(error);
          });
      },
      eventClick: function(info) {
        // Open modal with event data
        const event = info.event;
        const extendedProps = event.extendedProps;
        
        document.getElementById('schedule-id').value = event.id;
        document.getElementById('employee_id').value = extendedProps.employee_id;
        document.getElementById('shift_type').value = extendedProps.shift_type;
        document.getElementById('status').value = extendedProps.status || 'scheduled';
        document.getElementById('notes').value = extendedProps.notes || '';
        
        // Format dates for datetime-local input
        const startDate = new Date(event.start);
        const endDate = new Date(event.end);
        
        document.getElementById('start_time').value = formatDateTimeLocal(startDate);
        document.getElementById('end_time').value = formatDateTimeLocal(endDate);
        
        // Show delete button for existing events
        deleteScheduleBtn.classList.remove('d-none');
        
        // Update modal title
        document.getElementById('schedule-modal-label').textContent = 'Edit Schedule';
        
        scheduleModal.modal('show');
      },
      dateClick: function(info) {
        // Open empty modal for new event
        resetScheduleForm();
        
        // Set clicked date as start and end time
        const clickedDate = new Date(info.dateStr);
        const startDate = new Date(clickedDate);
        startDate.setHours(9, 0, 0); // Default to 9:00 AM
        
        const endDate = new Date(clickedDate);
        endDate.setHours(17, 0, 0); // Default to 5:00 PM
        
        document.getElementById('start_time').value = formatDateTimeLocal(startDate);
        document.getElementById('end_time').value = formatDateTimeLocal(endDate);
        
        // Set employee from filter if selected
        if (employeeFilter.value) {
          document.getElementById('employee_id').value = employeeFilter.value;
        }
        
        // Set shift type from filter if selected
        if (shiftTypeFilter.value) {
          document.getElementById('shift_type').value = shiftTypeFilter.value;
        }
        
        // Hide delete button for new events
        deleteScheduleBtn.classList.add('d-none');
        
        // Update modal title
        document.getElementById('schedule-modal-label').textContent = 'Add Schedule';
        
        scheduleModal.modal('show');
      }
    });
    
    calendar.render();
    
    // Apply filters
    employeeFilter.addEventListener('change', function() {
      calendar.refetchEvents();
    });
    
    shiftTypeFilter.addEventListener('change', function() {
      calendar.refetchEvents();
    });
    
    // Add schedule button
    addScheduleBtn.addEventListener('click', function() {
      resetScheduleForm();
      
      // Set default dates
      const now = new Date();
      const startDate = new Date(now);
      startDate.setHours(9, 0, 0); // Default to 9:00 AM
      
      const endDate = new Date(now);
      endDate.setHours(17, 0, 0); // Default to 5:00 PM
      
      document.getElementById('start_time').value = formatDateTimeLocal(startDate);
      document.getElementById('end_time').value = formatDateTimeLocal(endDate);
      
      // Set employee from filter if selected
      if (employeeFilter.value) {
        document.getElementById('employee_id').value = employeeFilter.value;
      }
      
      // Set shift type from filter if selected
      if (shiftTypeFilter.value) {
        document.getElementById('shift_type').value = shiftTypeFilter.value;
      }
      
      // Hide delete button for new events
      deleteScheduleBtn.classList.add('d-none');
      
      // Update modal title
      document.getElementById('schedule-modal-label').textContent = 'Add Schedule';
      
      scheduleModal.modal('show');
    });
    
    // Save schedule
    saveScheduleBtn.addEventListener('click', function() {
      if (!scheduleForm.checkValidity()) {
        scheduleForm.reportValidity();
        return;
      }
      
      const scheduleId = document.getElementById('schedule-id').value;
      const formData = {
        employee_id: document.getElementById('employee_id').value,
        shift_type: document.getElementById('shift_type').value,
        start_time: document.getElementById('start_time').value,
        end_time: document.getElementById('end_time').value,
        notes: document.getElementById('notes').value,
        status: document.getElementById('status').value,
        send_notification: document.getElementById('send_notification').checked ? 'true' : 'false'
      };
      
      // Determine if create or update
      const url = scheduleId ? `/management/schedule/${scheduleId}` : '/management/schedule';
      const method = scheduleId ? 'PUT' : 'POST';
      
      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(error => Promise.reject(error));
          }
          return response.json();
        })
        .then(data => {
          // Close modal and refresh calendar
          scheduleModal.modal('hide');
          calendar.refetchEvents();
          
          // Show success message
          toastr.success(scheduleId ? 'Schedule updated successfully' : 'Schedule created successfully');
        })
        .catch(error => {
          console.error('Error saving schedule:', error);
          
          if (error.conflicts) {
            // Show conflict message
            toastr.error('Schedule conflicts detected. Please choose a different time.');
          } else {
            toastr.error(error.error || 'Failed to save schedule');
          }
        });
    });
    
    // Delete schedule
    deleteScheduleBtn.addEventListener('click', function() {
      const scheduleId = document.getElementById('schedule-id').value;
      
      if (!scheduleId) {
        return;
      }
      
      if (!confirm('Are you sure you want to delete this schedule?')) {
        return;
      }
      
      fetch(`/management/schedule/${scheduleId}`, {
        method: 'DELETE'
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(error => Promise.reject(error));
          }
          return response.json();
        })
        .then(data => {
          // Close modal and refresh calendar
          scheduleModal.modal('hide');
          calendar.refetchEvents();
          
          // Show success message
          toastr.success('Schedule deleted successfully');
        })
        .catch(error => {
          console.error('Error deleting schedule:', error);
          toastr.error(error.error || 'Failed to delete schedule');
        });
    });
    
    // Helper functions
    function resetScheduleForm() {
      scheduleForm.reset();
      document.getElementById('schedule-id').value = '';
    }
    
    function formatDateTimeLocal(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      
      return `${year}-${month}-${day}T${hours}:${minutes}`;
    }
  });
</script>
